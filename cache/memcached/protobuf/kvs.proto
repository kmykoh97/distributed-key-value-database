// protoc -I protobuf/ protobuf/kvs.proto --go_out=plugins=grpc:protobuf
syntax = "proto3";
package protobuf;

import "google/protobuf/empty.proto";

// A simple KVS API
// All API endpoints require a token containing the username and current namespace
// unless otherwise specified.
service KVS {
  // Inserts a key-value pair into a namespace, if not present
  rpc Set(KeyValuePair) returns (Response) {}

  // Updates a key-value pair in a namespace, if present
  rpc Update(KeyValuePair) returns (Response) {}

  // Checks if a key is in a namespace
  rpc Has(Key) returns (Response) {}

  // Removes a key in a namespace, if present
  rpc Unset(Key) returns (KeyValuePair) {}

  // Retrieves an element from a namespace under given key
  rpc Get(Key) returns (KeyValuePair) {}

  // Returns the total number of key-value pairs in a namespace
  rpc Count(google.protobuf.Empty) returns (CountResponse) {}

  // Retrieve all keys in a namespace
  rpc ShowKeys(google.protobuf.Empty) returns (ShowKeysResponse) {}

  // Retrieve all key-value pairs in a namespace
  rpc ShowData(google.protobuf.Empty) returns (ShowDataResponse) {}

  // Retrieve all namespaces in the key-value store that belongs to the user
  // NOTE: No token needed
  rpc ShowNamespaces(google.protobuf.Empty) returns (ShowNamespacesResponse) {}

  // Changes the current namespace, returns a token that must be used for
  // subsequent requests
  // NOTE: No token needed
  rpc UseNamespace(Namespace) returns (NamespaceResponse) {}
}

message KeyValuePair {
  string key = 1;
  string value = 2;
}

message Key {
  string key = 1;
}

message Namespace {
  string namespace = 1;
}

message Response {
  bool success = 1;
  string value = 2;
}

message CountResponse {
  int32 count = 1;
}

message ShowKeysResponse {
  repeated string keys = 1;
}

message ShowDataResponse {
  repeated KeyValuePair data = 1;
}

message ShowNamespacesResponse {
  repeated string namespaces = 1;
}

message NamespaceResponse {
  string token = 1;
}
